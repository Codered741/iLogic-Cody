' iLogic script to arrange cart assemblies within a truck's rectangular sketch on XY plane
' Assumptions: Truck part named contains "truck" (case-insensitive) with a sketch containing a single rectangle
' Carts are placed on XY plane with Z=0, no rotation, sorted by browser tree order initially
' Uses corner-based positions with 0.5-inch step size, all in inches
' Tries placing carts in browser tree order 5 times, then prompts once to shuffle smallest unplaceable cart earlier by one position if area <= 90%, retries up to 3 times
' On successful shuffle, reorders occurrences to reflect sorted cart order
' Shows utilization and placed cart count on success

Sub Main
    Dim oDoc As AssemblyDocument
    oDoc = ThisApplication.ActiveDocument
    
    Dim truckPart As PartDocument
    Dim truckRect As SketchEntity
    Dim truckDims(1) As Double
    truckPart = GetTruckPart(oDoc)
    If truckPart Is Nothing Then
        Dim debugMsg As String
        debugMsg = "Truck part not found! Available components:" & vbCrLf
        Dim comp As ComponentOccurrence
        For Each comp In oDoc.ComponentDefinition.Occurrences
            debugMsg = debugMsg & comp.Name & vbCrLf
        Next
        MsgBox(debugMsg, vbCritical, "Error: Truck Part Not Found")
        Exit Sub
    End If
    truckRect = GetTruckRectangle(truckPart)
    If truckRect Is Nothing Then
        MsgBox("No rectangle found in Truck part sketch!", vbCritical)
        Exit Sub
    End If
    truckDims = GetRectangleDimensions(truckRect)
    
    Dim carts As Collection
    carts = GetCartAssemblies(oDoc, truckPart)
    If carts.Count = 0 Then
        MsgBox("No cart assemblies found!", vbCritical)
        Exit Sub
    End If
    
    Dim maxInitialRetries As Integer
    maxInitialRetries = 5
    Dim maxShuffleRetries As Integer
    maxShuffleRetries = 3
    Dim attempt As Integer
    attempt = 1
    Dim allPlaced As Boolean
    allPlaced = False
    Dim placedCarts As Collection
    Dim occupiedRects As Collection
    Dim sortedCarts As Collection
    sortedCarts = carts ' Browser tree order initially
    Dim unplacedCart As ComponentOccurrence
    Dim totalCartArea As Double
    totalCartArea = 0
    Dim cart As ComponentOccurrence
    For Each cart In sortedCarts
        Dim cartDimensions(1) As Double
        cartDimensions = GetCartDimensions(cart)
        totalCartArea = totalCartArea + (cartDimensions(0) * cartDimensions(1))
    Next
    Dim truckArea As Double
    truckArea = truckDims(0) * truckDims(1)
    Dim wasShuffled As Boolean
    wasShuffled = False
    
    ' Initial attempts in browser tree order
    While attempt <= maxInitialRetries And Not allPlaced
        placedCarts = New Collection
        occupiedRects = New Collection
        
        ' Progress bar commented out
        'Dim oProgressBar As ProgressBar
        'oProgressBar = ThisApplication.CreateProgressBar(False, carts.Count, "Placing Carts (Attempt " & attempt & ")")
        'Dim cartIndex As Integer
        'cartIndex = 1
        
        allPlaced = True
        unplacedCart = Nothing
        For Each cart In sortedCarts
            'oProgressBar.Message = "Processing cart " & cartIndex & " of " & carts.Count
            Dim placed As Boolean
            placed = False
            Dim positions As Collection
            positions = GeneratePositions(occupiedRects, truckDims)
            Dim localCartDimensions(1) As Double
            localCartDimensions = GetCartDimensions(cart)
            
            Dim pos As Object
            For Each pos In positions
                If CheckConstraints(cart, pos, localCartDimensions, truckDims, occupiedRects) Then
                    PlaceCart(cart, pos)
                    Dim cartPos(1) As Object
                    cartPos(0) = cart
                    cartPos(1) = pos
                    placedCarts.Add(cartPos)
                    Dim rectData(3) As Double
                    rectData(0) = pos(0)
                    rectData(1) = pos(1)
                    rectData(2) = localCartDimensions(0)
                    rectData(3) = localCartDimensions(1)
                    occupiedRects.Add(rectData)
                    placed = True
                    Exit For
                End If
            Next
            If Not placed Then
                allPlaced = False
                unplacedCart = cart
                'oProgressBar.Close()
                Exit For
            End If
            'cartIndex = cartIndex + 1
            'oProgressBar.UpdateProgress()
        Next
        'oProgressBar.Close()
        attempt = attempt + 1
    End While
    
    ' If not all placed and area <= 90%, prompt to shuffle
    If Not allPlaced And totalCartArea <= 0.9 * truckArea Then
        Dim response As MsgBoxResult
        response = MsgBox("Cannot place cart: " & unplacedCart.Name & " after " & maxInitialRetries & " attempts. " & vbCrLf & _
                          "Total cart area is " & FormatPercent(totalCartArea / truckArea, 2) & " of truck area. " & vbCrLf & _
                          "Would you like to shuffle the smallest unplaceable cart earlier and retry?", MsgBoxStyle.YesNo + MsgBoxStyle.Question, "Retry Placement")
        If response = MsgBoxResult.No Then
            MsgBox("Failed to place all carts after " & maxInitialRetries & " attempts.", vbCritical)
            Exit Sub
        End If
        
        ' Shuffle retries
        wasShuffled = True
        sortedCarts = MoveSmallestUnplacedEarlier(unplacedCart, sortedCarts)
        attempt = 1
        While attempt <= maxShuffleRetries And Not allPlaced
            placedCarts = New Collection
            occupiedRects = New Collection
            
            ' Progress bar commented out
            'Dim oProgressBar As ProgressBar
            'oProgressBar = ThisApplication.CreateProgressBar(False, carts.Count, "Placing Carts (Shuffle Attempt " & attempt & ")")
            'Dim cartIndex As Integer
            'cartIndex = 1
            
            allPlaced = True
            unplacedCart = Nothing
            For Each cart In sortedCarts
                'oProgressBar.Message = "Processing cart " & cartIndex & " of " & carts.Count
                Dim placed As Boolean
                placed = False
                Dim positions As Collection
                positions = GeneratePositions(occupiedRects, truckDims)
                Dim localCartDimensions(1) As Double
                localCartDimensions = GetCartDimensions(cart)
                
                Dim pos As Object
                For Each pos In positions
                    If CheckConstraints(cart, pos, localCartDimensions, truckDims, occupiedRects) Then
                        PlaceCart(cart, pos)
                        Dim cartPos(1) As Object
                        cartPos(0) = cart
                        cartPos(1) = pos
                        placedCarts.Add(cartPos)
                        Dim rectData(3) As Double
                        rectData(0) = pos(0)
                        rectData(1) = pos(1)
                        rectData(2) = localCartDimensions(0)
                        rectData(3) = localCartDimensions(1)
                        occupiedRects.Add(rectData)
                        placed = True
                        Exit For
                    End If
                Next
                If Not placed Then
                    allPlaced = False
                    unplacedCart = cart
                    'oProgressBar.Close()
                    Exit For
                End If
                'cartIndex = cartIndex + 1
                'oProgressBar.UpdateProgress()
            Next
            'oProgressBar.Close()
            
            If Not allPlaced And attempt < maxShuffleRetries Then
                sortedCarts = MoveSmallestUnplacedEarlier(unplacedCart, sortedCarts)
            End If
            attempt = attempt + 1
        End While
    End If
    
    If Not allPlaced Then
        MsgBox("Failed to place all carts after all attempts.", vbCritical)
        Exit Sub
    End If
    
    ' If shuffled and successful, reorder occurrences to reflect sorted cart order
    If allPlaced And wasShuffled Then
        Dim oOccs As ComponentOccurrences
        oOccs = oDoc.ComponentDefinition.Occurrences
        Dim tempDoc As AssemblyDocument
        tempDoc = ThisApplication.Documents.Add(kAssemblyDocumentObject)
        Dim tempOccs As ComponentOccurrences
        tempOccs = tempDoc.ComponentDefinition.Occurrences
        Dim i As Integer
        i = 1
        For Each cart In sortedCarts
            Dim sourceOcc As ComponentOccurrence
            sourceOcc = oOccs.ItemByName(cart.Name)
            tempOccs.AddByComponentDefinition(sourceOcc.Definition, sourceOcc.Transformation)
            i = i + 1
        Next
        ' Delete original occurrences except truck
        For Each tempCart In oOccs
            If Not LCase(tempCart.Name) Like "*truck*" Then
                tempCart.Delete
            End If
        Next
        ' Re-add occurrences in sorted order
        i = 1
        For Each tempCart In tempOccs
            oOccs.AddByComponentDefinition(tempCart.Definition, tempCart.Transformation)
            i = i + 1
        Next
        tempDoc.Close(True)
    End If
    
    Dim utilization As Double
    utilization = totalCartArea / truckArea
    
    oDoc.Update()
    ThisApplication.ActiveView.Fit()
    ThisApplication.ActiveView.Update()
    
    Dim output As String
    output = "Arrangement Complete!" & vbCrLf & _
             "Utilization: " & FormatPercent(utilization, 2) & vbCrLf & _
             "Placed Carts: " & placedCarts.Count
    MsgBox(output, vbInformation)
End Sub

Function GetTruckPart(oDoc As AssemblyDocument) As PartDocument
    Dim comp As ComponentOccurrence
    For Each comp In oDoc.ComponentDefinition.Occurrences
        If LCase(comp.Name) Like "*truck*" Then
            If TypeOf comp.ReferencedDocumentDescriptor.ReferencedDocument Is PartDocument Then
                GetTruckPart = comp.ReferencedDocumentDescriptor.ReferencedDocument
                Exit Function
            End If
        End If
    Next
    GetTruckPart = Nothing
End Function

Function GetTruckRectangle(truckPart As PartDocument) As SketchEntity
    Dim sketch As PlanarSketch
    For Each sketch In truckPart.ComponentDefinition.Sketches
        If sketch.PlanarEntity.Name = "XY Plane" Then
            Dim entity As SketchEntity
            For Each entity In sketch.SketchEntities
                If TypeOf entity Is SketchLine Then
                    GetTruckRectangle = entity
                    Exit Function
                End If
            Next
        End If
    Next
    GetTruckRectangle = Nothing
End Function

Function GetRectangleDimensions(rect As SketchEntity) As Double()
    Dim sketch As PlanarSketch
    sketch = rect.Parent
    Dim lines As SketchLines
    lines = sketch.SketchLines
    Dim minX As Double, maxX As Double, minY As Double, maxY As Double
    minX = 1E9: maxX = -1E9: minY = 1E9: maxY = -1E9
    Dim line As SketchLine
    For Each line In lines
        minX = IIf(line.StartSketchPoint.Geometry.X < minX, line.StartSketchPoint.Geometry.X, minX)
        maxX = IIf(line.StartSketchPoint.Geometry.X > maxX, line.StartSketchPoint.Geometry.X, maxX)
        minY = IIf(line.StartSketchPoint.Geometry.Y < minY, line.StartSketchPoint.Geometry.Y, minY)
        maxY = IIf(line.StartSketchPoint.Geometry.Y > maxY, line.StartSketchPoint.Geometry.Y, maxY)
        minX = IIf(line.EndSketchPoint.Geometry.X < minX, line.EndSketchPoint.Geometry.X, minX)
        maxX = IIf(line.EndSketchPoint.Geometry.X > maxX, line.EndSketchPoint.Geometry.X, maxX)
        minY = IIf(line.EndSketchPoint.Geometry.Y < minY, line.EndSketchPoint.Geometry.Y, minY)
        maxY = IIf(line.EndSketchPoint.Geometry.Y > maxY, line.EndSketchPoint.Geometry.Y, maxY)
    Next
    Dim dims(1) As Double
    dims(0) = maxX - minX
    dims(1) = maxY - minY
    GetRectangleDimensions = dims
End Function

Function GetCartAssemblies(oDoc As AssemblyDocument, truckPart As PartDocument) As Collection
    Dim carts As New Collection
    Dim comp As ComponentOccurrence
    For Each comp In oDoc.ComponentDefinition.Occurrences
        If truckPart Is Nothing OrElse comp.ReferencedDocumentDescriptor.ReferencedDocument IsNot truckPart Then
            carts.Add(comp)
        End If
    Next
    GetCartAssemblies = carts
End Function

Function SortCartsByArea(carts As Collection) As Collection
    SortCartsByArea = carts
End Function

Function GetCartDimensions(cart As ComponentOccurrence) As Double()
    Dim rangeBox As Box
    rangeBox = cart.RangeBox
    Dim width As Double, length As Double
    width = rangeBox.MaxPoint.X - rangeBox.MinPoint.X
    length = rangeBox.MaxPoint.Y - rangeBox.MinPoint.Y
    Dim dims(1) As Double
    dims(0) = width
    dims(1) = length
    GetCartDimensions = dims
End Function

Function GeneratePositions(occupiedRects As Collection, truckDims() As Double) As Collection
    Dim positions As New Collection
    Dim stepSize As Double
    stepSize = 0.25 ' Step size in inches for dense corner-based placement
    Dim initialPos(1) As Double
    initialPos(0) = 0
    initialPos(1) = 0
    positions.Add(initialPos)
    Dim rect As Object
    For Each rect In occupiedRects
        Dim x As Double, y As Double
        For x = rect(0) + rect(2) To rect(0) + rect(2) + stepSize Step stepSize
            For y = rect(1) To rect(1) + stepSize Step stepSize
                Dim pos1(1) As Double
                pos1(0) = x
                pos1(1) = y
                positions.Add(pos1)
            Next
        Next
        For x = rect(0) To rect(0) + stepSize Step stepSize
            For y = rect(1) + rect(3) To rect(1) + rect(3) + stepSize Step stepSize
                Dim pos2(1) As Double
                pos2(0) = x
                pos2(1) = y
                positions.Add(pos2)
            Next
        Next
    Next
    Dim sortedPos As New Collection
    Dim posArray() As Object
    ReDim posArray(0 To positions.Count - 1)
    Dim i As Integer
    i = 0
    Dim position As Object
    For Each position In positions
        posArray(i) = position
        i = i + 1
    Next
    Dim j As Integer
    For i = 0 To UBound(posArray) - 1
        For j = i + 1 To UBound(posArray)
            If posArray(i)(0) > posArray(j)(0) Or _
               (posArray(i)(0) = posArray(j)(0) And posArray(i)(1) > posArray(j)(1)) Then
                Dim temp As Object
                temp = posArray(i)
                posArray(i) = posArray(j)
                posArray(j) = temp
            End If
        Next
    Next
    For i = 0 To UBound(posArray)
        sortedPos.Add(posArray(i))
    Next
    GeneratePositions = sortedPos
End Function

Function CheckConstraints(cart As ComponentOccurrence, pos() As Double, dims() As Double, _
                         truckDims() As Double, occupiedRects As Collection) As Boolean
    If pos(0) + dims(0) > truckDims(0) Or pos(1) + dims(1) > truckDims(1) Then
        CheckConstraints = False
        Exit Function
    End If
    Dim rect As Object
    For Each rect In occupiedRects
        If Not (pos(0) + dims(0) <= rect(0) Or pos(0) >= rect(0) + rect(2) Or _
                pos(1) + dims(1) <= rect(1) Or pos(1) >= rect(1) + rect(3)) Then
            CheckConstraints = False
            Exit Function
        End If
    Next
    CheckConstraints = True
End Function

Sub PlaceCart(cart As ComponentOccurrence, pos() As Double)
    Dim oTG As TransientGeometry
    oTG = ThisApplication.TransientGeometry
    Dim matrix As Matrix
    matrix = oTG.CreateMatrix
    matrix.SetTranslation(oTG.CreateVector(pos(0), pos(1), 0))
    cart.Transformation = matrix
End Sub

Function MoveSmallestUnplacedEarlier(unplacedCart As ComponentOccurrence, carts As Collection) As Collection
    Dim sortedCarts As New Collection
    Dim cartArray() As ComponentOccurrence
    ReDim cartArray(0 To carts.Count - 1)
    Dim i As Integer
    i = 0
    Dim cart As ComponentOccurrence
    For Each cart In carts
        cartArray(i) = cart
        i = i + 1
    Next
    ' Find index of unplaced cart
    Dim unplacedIndex As Integer
    unplacedIndex = -1
    For i = 0 To carts.Count - 1
        If cartArray(i) Is unplacedCart Then
            unplacedIndex = i
            Exit For
        End If
    Next
    ' If unplaced cart is not first, swap with previous
    If unplacedIndex > 0 Then
        Dim temp As ComponentOccurrence
        temp = cartArray(unplacedIndex)
        cartArray(unplacedIndex) = cartArray(unplacedIndex - 1)
        cartArray(unplacedIndex - 1) = temp
    End If
    For i = 0 To carts.Count - 1
        sortedCarts.Add(cartArray(i))
    Next
    MoveSmallestUnplacedEarlier = sortedCarts
End Function